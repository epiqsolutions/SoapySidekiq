#!/usr/bin/env python3

import sys
import time
import numpy as np
import argparse
import threading
import signal
import SoapySDR
from SoapySDR import *

DEFAULT_NUM_BLOCKS = 30000

running = True
tx_total_samps = 0
rx_total_samps = 0
tx_total_blocks = 0
rx_total_blocks = 0

def signal_handler(sig, frame):
    global running
    print('You pressed Ctrl+C!')
    running = False


def transmit(sdr, tx_stream, buff_len, tx_buff, rate):
    global running, tx_total_samps, tx_total_blocks
    SoapySDR.log(SoapySDR.SOAPY_SDR_TRACE,"in transmit")

    print(f"tx buff len: {buff_len}")
    sdr.activateStream(tx_stream)  # this turns the radio on

    last_underruns = 0

    while running:
        try:
            rc = sdr.writeStream(tx_stream, [tx_buff], buff_len)
            tx_total_blocks += 1

            if rc.ret != buff_len:
                SoapySDR.log(SoapySDR.SOAPY_SDR_ERROR, 
                             'TX Error {}: {}'.format(rc.ret, errToStr(rc.ret)))

            #print(f"-{tx_total_blocks}", end='\n', flush=True)
            tx_total_samps += buff_len

        except KeyboardInterrupt:
            break

        underrun_happened = sdr.readStreamStatus(tx_stream)
        if underrun_happened.ret == SoapySDR.SOAPY_SDR_UNDERFLOW:
            SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, "underrun happened")

    sdr.deactivateStream(tx_stream)
    sdr.closeStream(tx_stream)

    SoapySDR.log(SoapySDR.SOAPY_SDR_TRACE,"leaving transmit")

def receive_num_blocks(sdr, rx_stream, num_blocks, buff_len, rx_buff, file_name, num_loops):
    global running, rx_total_samps, rx_total_blocks, tx_total_blocks
    for idx in range(num_blocks):
        if not running:
            break

        rc = sdr.readStream(rx_stream, [rx_buff[idx]], buff_len)

        rx_total_blocks += 1

        if rc.ret != buff_len:
            SoapySDR.log(SoapySDR.SOAPY_SDR_ERROR, f"RX Error {rc.ret} ")

        rx_total_samps += buff_len
        #print(f"+{rx_total_blocks}", end='\n', flush=True)

def receive(sdr, rx_stream, num_blocks, buff_len, rx_buff, file_name, num_loops):
    global running, rx_total_samps, rx_total_blocks, tx_total_blocks

    SoapySDR.log(SoapySDR.SOAPY_SDR_TRACE,"in receive")

    sdr.activateStream(rx_stream)  # this turns the radio on
   
    if num_loops:
        while num_loops > 0:
            receive_num_blocks(sdr, rx_stream, num_blocks, buff_len, rx_buff, file_name, num_loops)
            num_loops -= 1
    else:
        while running:
            receive_num_blocks(sdr, rx_stream, num_blocks, buff_len, rx_buff, file_name, num_loops)


    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, 
            f"Receive is complete, received {rx_total_samps:,} samples")

    sdr.deactivateStream(rx_stream)
    sdr.closeStream(rx_stream)

    # stop the transmit thread
    running = False

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, 
            f"Writing {(rx_total_samps * 4):,} bytes to filename: {file_name}")

#    first_10_bytes = rx_buff.tobytes()[:10]
#    print('DEBUG: First 10 bytes in hex:', ' '.join(f'{b:02x}' for b in first_10_bytes))

    rx_buff.tofile(f"{file_name}")

    SoapySDR.log(SoapySDR.SOAPY_SDR_TRACE,"leaving receive")


def make_tone(n, fcen, fs, max_value, phi=0.285):
    """
    Generates tone signal window with a frequency that is an integer
    multiple of the sample rate so it can be repeated without a phase
    discontinuity.
    """
    period = fs / fcen

    #assert n % period == 0, 'Total samples not integer number of periods'
    # Make Complex Valued Tone Signal
    wt = np.array(2 * np.pi * fcen * np.arange(n) / fs)
    sig_cplx = np.exp(1j * (wt + phi))

    # Convert to interleaved int16 values
    sig_int16 = np.empty(2 * n, dtype=np.int16)
    sig_int16[0::2] = max_value * sig_cplx.real
    sig_int16[1::2] = max_value * sig_cplx.imag
    return sig_int16



def main(cardno, serial, 
         rx_handle, tx_handle, 
         rate, bw, freq, 
         gain, num_blocks, file_name,
         offset, attenuation, num_loops):
    global running, rx_total_samps, tx_total_samps, rx_total_blocks, tx_total_blocks

    if serial is None:
        args = dict(card = cardno)
    else:
        args = dict(serial = serial)

    sdr = SoapySDR.Device(args)

    SoapySDR.setLogLevel(SOAPY_SDR_TRACE)
#    SoapySDR.setLogLevel(SOAPY_SDR_ERROR)

    # get the full scale value for making the tone.
    rc = sdr.getNativeStreamFormat(SOAPY_SDR_TX, tx_handle)
    fullscale = int(rc.fullScale)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"TX fullscale value on this card {fullscale:,}")

    rx_stream = sdr.setupStream(SOAPY_SDR_RX, SOAPY_SDR_CS16, [rx_handle])
    tx_stream = sdr.setupStream(SOAPY_SDR_TX, SOAPY_SDR_CS16, [tx_handle])

    # make the buffer the size of the MTU * The number of MTU we want in one go
    rx_buff_len = sdr.getStreamMTU(rx_stream) * 8 
    tx_buff_len = sdr.getStreamMTU(tx_stream)

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"RX Buffer length is {rx_buff_len:,} words")
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"TX Buffer length is {tx_buff_len:,} words")

    if offset is None:
        offset = rate / 4

    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"Tone will be {int(offset):,} Hz above LO\n")

    rx_buff = np.empty((num_blocks, rx_buff_len * 2), dtype=np.int16)
    tx_buff = make_tone(tx_buff_len, offset, rate, fullscale)

    # Setup Radio
    sdr.setSampleRate(SOAPY_SDR_RX, rx_handle, rate)
    sdr.setSampleRate(SOAPY_SDR_TX, tx_handle, rate)

    act_sample_rate = sdr.getSampleRate(SOAPY_SDR_RX, rx_handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"RX sample rate set to: {act_sample_rate}")
    act_sample_rate = sdr.getSampleRate(SOAPY_SDR_TX, tx_handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"TX sample rate set to: {act_sample_rate}")

    if bw is not None:
        sdr.setBandwidth(SOAPY_SDR_RX, rx_handle, bw)  
        sdr.setBandwidth(SOAPY_SDR_TX, tx_handle, bw)  
    else:
        sdr.setBandwidth(SOAPY_SDR_RX, rx_handle, (rate * 0.8))  
        sdr.setBandwidth(SOAPY_SDR_TX, tx_handle, (rate * 0.8))  

    act_bw = sdr.getBandwidth(SOAPY_SDR_RX, rx_handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"RX bw set to: {act_bw}")
    act_bw = sdr.getBandwidth(SOAPY_SDR_TX, tx_handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"TX bw set to: {act_bw}")

    sdr.setFrequency(SOAPY_SDR_RX, rx_handle, freq)  
    sdr.setFrequency(SOAPY_SDR_TX, tx_handle, freq)  

    act_freq = sdr.getFrequency(SOAPY_SDR_RX, rx_handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"RX freq set to: {act_freq}")
    act_freq = sdr.getFrequency(SOAPY_SDR_TX, tx_handle)
    SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"TX freq set to: {act_freq}")

    if gain is not None:
        sdr.setGainMode(SOAPY_SDR_RX, rx_handle, False)
        sdr.setGain(SOAPY_SDR_RX, rx_handle, float(gain))
        setgain = sdr.getGain(SOAPY_SDR_RX, rx_handle)
        SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"actual gain set to: {setgain} dB ")
    else:
        sdr.setGainMode(SOAPY_SDR_RX, rx_handle, True)

    if attenuation is not None:
        sdr.setGain(SOAPY_SDR_TX, tx_handle, float(attenuation))
        setattenuation = sdr.getGain(SOAPY_SDR_TX, tx_handle)
        SoapySDR.log(SoapySDR.SOAPY_SDR_INFO, f"actual attenuation: {setattenuation} dB ")
    else:
        sdr.setGain(SOAPY_SDR_TX, tx_handle, float(0))

    transmit_thread = threading.Thread(target=transmit, name='transmit',args=(sdr,tx_stream,tx_buff_len,tx_buff,rate, ))
    receive_thread = threading.Thread(target=receive, name='receive',args=(sdr,rx_stream,num_blocks,rx_buff_len,rx_buff,file_name,num_loops,  ))

    transmit_thread.start()
    receive_thread.start()

    time_ctr = 0
    while running:
        try:
            time.sleep(1)
            time_ctr += 1

            print(f"\trx_total_samps: {rx_total_samps:,}, \trx_total_blocks: {rx_total_blocks:,}"
                    f"\trx samp/sec: {int(rx_total_samps / time_ctr):,}")

            print(f"\ttx_total_samps: {tx_total_samps:,}, \ttx_total_blocks: {tx_total_blocks:,}"
                    f"\ttx samp/sec: {int(tx_total_samps / time_ctr):,}\n")

        except FileNotFoundError:
            print("File not found.")
            running = False;
        except OSError:
            print("OS error occurred.")
            running = False;

    
    transmit_thread.join()
    receive_thread.join()


def parse_command_line_arguments():
    """ Create command line options for transmit function """
    help_formatter = argparse.ArgumentDefaultsHelpFormatter
    parser = argparse.ArgumentParser(description='tx app template',
                                     formatter_class=help_formatter)

    parser.add_argument('-c', required=False, dest='card',
                        default="0", help='Card number') 
    parser.add_argument('--serial', required=False, dest='serial',
                        default=None, help='Serial number') 
    parser.add_argument('--rx-handle', type=int, required=False, dest='rx_handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('--tx-handle', type=int, required=False, dest='tx_handle',
                        default=0, help='Handle [0 or 1]')
    parser.add_argument('-r', type=float, required=False, dest='rate',
                        default=20e6, help='Sample Rate')
    parser.add_argument('-bw', type=float, required=False, dest='bw',
                        default=None, help='Bandwidth')
    parser.add_argument('-f', type=float, required=False, dest='freq',
                        default=1000e6, help='LO Frequency')
    parser.add_argument('-g', type=int, required=False, dest='gain',
                        default=None, help='gain in dB, otherwise automatic')
    parser.add_argument('--num-blocks', type=int, required=False, dest='num_blocks',
                        default=DEFAULT_NUM_BLOCKS, help='Number of blocks to receive')
    parser.add_argument('-d', type=str, required=False, dest='dest',
                        default='samples.bin', help='File name where samples are written')
    parser.add_argument('--offset', type=float, required=False, dest='offset',
                        default=2e6, help='Offset from LO')
    parser.add_argument('-a', type=int, required=False, dest='attenuation',
                        default=0, help='TX attenuation')
    parser.add_argument('--num-loops', type=int, required=False, dest='num_loops',
                        default=None, help='number of times to loop over the receive of num-blocks')

    
    return parser.parse_args(sys.argv[1:])


if __name__ == '__main__':
    pars = parse_command_line_arguments()
    signal.signal(signal.SIGINT, signal_handler)

    make_float = False

    main(pars.card, 
        pars.serial, 
        pars.rx_handle, 
        pars.tx_handle, 
        pars.rate, 
        pars.bw, 
        pars.freq, 
        pars.gain,
        pars.num_blocks,
        pars.dest,
        pars.offset,
        pars.attenuation,
        pars.num_loops) 
